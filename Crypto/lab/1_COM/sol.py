from math import gcd
from Crypto.Util.number import inverse, long_to_bytes
n1 = 76687279257798640947858975424805632530136323805549306034706434746173410203589234073443439965600599504492938774182031334521809637756726167054291234327063290731710499375884957198007932981278927142871025933266603495566615687362279411245648451845082117059185654880945387509174111921145501524485946008642761983657
n2 = 75751626169026798286429915743565487748336072138719327171091303855410842649833650061298874202343695785317789564424945958690418853225673779001252707561099987194562212960215959420979453973754087149937046522071112726399352572272068357010448169658513316533169686363640998601787728521278405779771440180789086856419

p = gcd(n1,n2) # gcd(n1,n2) = p

c = 56364073001338131827764316287921293051767701823431405280573403877156347535999056720541191885097687905564480198311990172149910944999328485369093887271112079863973922267616402420873441170375796478717767989633925193704847465976164518913288000441690003504757478190678884623737094637928660639616014195316804765232
q1 = n1 // p # p*q1 = n

phi_n = (p - 1) * (q1 - 1)

e = 65537
d = inverse(e, phi_n) # ed = 1 (mod phi(n))
assert (e*d)%phi_n == 1

m = pow(c, d, n1) # decrypt

print(long_to_bytes(m))