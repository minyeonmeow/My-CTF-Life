#!/usr/bin/env python3
from Crypto.Util.number import *

n = 48581831406795994297084387875908073313351613309409699802212849541437777313122084789367619979954427646991517141229352987075806819683785286275425466760042896412323863176295270262454852592225929680726666553857406533085950170538333531662851921033001954744540998800354945472568877832939334190993251808713852258863
c = 24599617483042629578277285121173972504912037859463986046909740409463586319449226283343281615331318429105218275830212466271037796920749914715936814706377048655769225549466920127520555595115275564186559817818323021427991884151664970652516767069186401865986263921250135587004577360458810521385005579290744708085

P.<x> = PolynomialRing(Zmod(n))

padding = b'\x00' + b'\xff' * (128 - 2 - 16) + b'\x00'
padding = bytes_to_long(padding) << (8 * 16)

f = (padding + x) ^ 3 - c # m^e - c = 0(mod n)

roots = f.small_roots() # 求方程式根,約束求解

if roots: #如果有解,就是明文
    root = roots[0]
    flag = long_to_bytes(root)
    print(flag)
